Stars of Chance

by Alec Bargher & Victor Brown
-----------

TLDR: We are going to take up Professor Chugh's suggestion of making our project
based off of Interstellar. To do this, we are going to use random functions and
distance parameters to draw stars that are of a specific density.

Topics relevant to the course include:
- Image Generation
- Recursion
- Colorful Image / Text
- Command Line Arguments
- Lists and their functions

Easy goals:
- Assign colors randomly
- Generating a basic image
- allow user input for image parameters

Medium goals:
- randomly pick star "center" points
  

Challenge goals:
- Density function(s) for star proximity and for pixels comprising a single star
- assign random "brightness" value (star size)
  - to give stars a bright center appearance where they are dimmer at edges

==============

Picture this, you've just watched Interstellar and you want to have your Matthew McConaughey style
adventure. Unfortunately, you've got no spaceship, no money, and no Carhartt Jacket (unless you're
THE Victor Brown). Fortunately, you do have Haskell, and all of the advantages that Functional Programming
gives us! Armed with a computer, you set out to draw the image to capture your dreams. Who needs the
stars to align when you've got... Stars of Chance.

There are two ideas for generating star centers. The first approach involves iterating from every pixel
in the array from (0,0) -> (row, col) where row is the height of the image and column is the length.
For each pixel, there is a probability function of this pixel being a star center that can be written
as below. P(X) = 1/x if forall prev_center, d(prev_center, curr_center) < threshold, and 0 otherwise.
I am curious to see whether this approach would equally distribute star centers, or favor a certain quadrant
(my guess would be the top left).